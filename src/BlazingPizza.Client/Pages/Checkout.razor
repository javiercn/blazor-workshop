@page "/checkout"
@attribute [Authorize]
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject OrderState OrderState
@inject IAccessTokenProvider TokenProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="main">
    <AuthorizeView Context="authContext">
        <NotAuthorized>
            <h2>Redirecting you...</h2>
        </NotAuthorized>
        <Authorized>
            <EditForm Model="OrderState.Order.DeliveryAddress" OnValidSubmit="PlaceOrder">
                <div class="checkout-cols">
                    <div class="checkout-order-details">
                        <h4>Review order</h4>
                        <OrderReview Order="@OrderState.Order" />
                    </div>

                    <div class="checkout-delivery-address">
                        <h4>Deliver to...</h4>
                        <AddressEditor Address="OrderState.Order.DeliveryAddress" />
                    </div>
                </div>

                <button type="submit" class="checkout-button btn btn-warning" disabled="@isSubmitting">
                    Place order
                </button>

                <DataAnnotationsValidator />
            </EditForm>
        </Authorized>
    </AuthorizeView>
</div>

@code {
    bool isSubmitting;

    protected override void OnInitialized()
    {
        // In the background, ask if they want to be notified about order updates
        _ = RequestNotificationSubscriptionAsync();
    }

    async Task PlaceOrder()
    {
        isSubmitting = true;

        var tokenResponse = await TokenProvider.RequestAccessToken();
        if (tokenResponse.TryGetToken(out var token))
        {
            try
            {
                var client = CreateAuthenticatedClient(token);
                var newOrderId = await client.PostJsonAsync<int>("orders", OrderState.Order);
                OrderState.ResetOrder();
                NavigationManager.NavigateTo($"myorders/{newOrderId}");
            }
            finally
            {
                isSubmitting = false;
            }
        }
        else
        {
            NavigationManager.NavigateTo(tokenResponse.RedirectUrl);
        }
    }

    async Task RequestNotificationSubscriptionAsync()
    {
        var tokenResponse = await TokenProvider.RequestAccessToken();
        if (tokenResponse.TryGetToken(out var token))
        {
            var subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription");
            if (subscription != null)
            {
                var client = CreateAuthenticatedClient(token);
                await client.PutJsonAsync<object>("notifications/subscribe", subscription);
            }
        }
        else
        {
            NavigationManager.NavigateTo(tokenResponse.RedirectUrl);
        }
    }

    private HttpClient CreateAuthenticatedClient(AccessToken token)
    {
        var client = new HttpClient();
        client.BaseAddress = new Uri(NavigationManager.BaseUri);
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
        return client;
    }
}
